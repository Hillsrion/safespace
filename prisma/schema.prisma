// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums for post-related statuses and severities
enum PostStatus {
  active    // Post is visible and active
  hidden    // Post is hidden from public view but still exists
}

enum PostSeverity {
  low       // Minor issue
  medium    // Moderate issue
  high      // Serious issue
  very_high // Very serious issue
}

enum PostVerificationStatus {
  unverified  // Report has not been verified
  pending     // Report is under review
  verified    // Report has been verified
  disputed    // Report is disputed
}

enum PostFlagStatus {
  pending_review  // Flag is awaiting review
  resolved        // Flag has been reviewed and resolved
  rejected        // Flag was found invalid and rejected
}

// AuditLog actions represent different types of user/system actions
enum AuditAction {
  user_invite     // User invited another user
  user_kick       // User was kicked from space
  user_role_change // User role changed
  post_create     // Post created
  post_update     // Post updated
  post_delete     // Post deleted
  post_flag       // Post flagged
  flag_resolve    // Flag resolved
  entity_add      // Reported entity added
  entity_update   // Reported entity updated
  space_create    // Space created
  space_update    // Space updated
  space_delete    // Space deleted
}

// User model represents platform users with different roles
// Users can belong to multiple spaces with different roles in each space
// SuperAdmins have global access while other roles are space-specific

// User model represents platform users with different roles
// Users can belong to multiple spaces with different roles in each space
// SuperAdmins have global access while other roles are space-specific
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  instagram     String?   // Optional Instagram username
  isSuperAdmin  Boolean   @default(false) // Global flag for super admin access
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  // Relations
  memberships   UserSpaceMembership[]
  createdSpaces Space[]   @relation("SpaceCreators")
  authoredPosts Post[]    @relation("AuthoredPosts")
  sentInvites   Invite[]  @relation("SentInvites")
  uploadedMedia Media[]   @relation("MediaUploaders")
  postedFlags   PostFlag[] @relation("PostFlaggers")
  resolvedFlags PostFlag[] @relation("FlagResolvers")
  auditLogs     AuditLog[] @relation("AuditActors")
  addedEntities ReportedEntity[] @relation("EntityAdders")
}

// Space model represents a community/organization within the platform
// Each space is an independent community with its own members and posts
// Users can belong to multiple spaces
model Space {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  // Relations
  creator     User      @relation("SpaceCreators", fields: [createdBy], references: [id])
  memberships UserSpaceMembership[]
  posts       Post[]
  invites     Invite[]
  auditLogs   AuditLog[]
  reportedEntities ReportedEntity[]

  @@index([name])
}

// Join table for User and Space
model UserSpaceMembership {
  userId    String
  spaceId   String
  role      String   // 'Admin', 'Moderator', 'Editor', 'Read-only'
  joinedAt  DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@id([userId, spaceId])

}

model Invite {
  id              String    @id @default(uuid())
  email           String
  token           String    @unique
  spaceId         String
  roleToAssign    String
  invitedByUserId String
  expiresAt       DateTime
  isUsed          Boolean   @default(false)
  createdAt       DateTime  @default(now())

  // Relations
  space           Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  inviter         User      @relation("SentInvites", fields: [invitedByUserId], references: [id])

  @@index([email, spaceId])
}

model ReportedEntity {
  id            String    @id @default(uuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  addedByUserId String
  spaceId       String

  // Relations
  addedBy       User      @relation("EntityAdders", fields: [addedByUserId], references: [id])
  space         Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  handles       ReportedEntityHandle[]
  posts         Post[]

  @@index([name])
}

model ReportedEntityHandle {
  id               String    @id @default(uuid())
  reportedEntityId String
  platform         String    @default("Instagram")
  handle           String
  createdAt        DateTime  @default(now())

  // Relations
  reportedEntity   ReportedEntity @relation(fields: [reportedEntityId], references: [id], onDelete: Cascade)

  @@unique([reportedEntityId, handle])
  @@index([handle])
}

// Post model represents reports about reported entities
// Posts must target a specific entity (name + one or more Instagram identifiers)
// If a targeted entity is not in the database, they are auto-added
model Post {
  id                 String    @id @default(uuid())
  spaceId            String
  authorId           String?
  reportedEntityId   String
  description        String
  isAnonymous        Boolean   @default(false)
  isAdminOnly        Boolean   @default(false)
  status             PostStatus @default(active) // Post visibility status: active, hidden, deleted
  severity           PostSeverity? // Severity level of the reported issue: low, medium, high
  verificationStatus PostVerificationStatus? // Verification status of the report: unverified, pending, verified, disputed
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt

  // Relations
  space              Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  author             User?     @relation("AuthoredPosts", fields: [authorId], references: [id], onDelete: SetNull)
  reportedEntity     ReportedEntity @relation(fields: [reportedEntityId], references: [id])
  media              Media[]
  flags              PostFlag[]

  @@index([createdAt])
  @@index([updatedAt])
}

model Media {
  id               String    @id @default(uuid())
  postId           String
  uploaderId       String
  storageKey       String    @unique
  fileName         String
  mimeType         String
  fileSize         Int
  metadataStripped Boolean   @default(false)
  isBlurred        Boolean   @default(true)
  createdAt        DateTime  @default(now())

  // Relations
  post             Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  uploader         User      @relation("MediaUploaders", fields: [uploaderId], references: [id])

  @@index([postId])
}

// PostFlag model represents user reports about posts
// Users can flag posts for moderation review
// Flags can be resolved by admins or moderators
model PostFlag {
  id              String    @id @default(uuid())
  postId          String
  flaggerUserId   String
  reason          String?
  status          PostFlagStatus @default(pending_review) // Flag processing status: pending_review, resolved, rejected
  resolvedByUserId String?
  resolvedAt      DateTime?
  createdAt       DateTime  @default(now())

  // Relations
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  flagger         User      @relation("PostFlaggers", fields: [flaggerUserId], references: [id])
  resolver        User?     @relation("FlagResolvers", fields: [resolvedByUserId], references: [id])

  @@index([postId])
  @@index([status])
}

model AuditLog {
  id               String    @id @default(uuid())
  actorUserId      String?
  action           AuditAction // Type of action performed by the actor
  targetEntityType String?
  targetEntityId   String?
  spaceId          String?
  details          Json?
  createdAt        DateTime  @default(now())

  // Relations
  actor            User?     @relation("AuditActors", fields: [actorUserId], references: [id])
  space            Space?    @relation(fields: [spaceId], references: [id])

  @@index([createdAt])
  @@index([actorUserId])
  @@index([action]) // Index for filtering by action type
  @@index([targetEntityId])
  @@index([spaceId])
}